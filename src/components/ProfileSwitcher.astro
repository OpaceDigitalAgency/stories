---
// Profile Switcher Component
// This component allows users to switch between different profiles (Child, Parent, Teacher)

interface Props {
  currentProfile?: 'child' | 'parent' | 'teacher';
  showLabels?: boolean;
  size?: 'sm' | 'md' | 'lg';
}

const { 
  currentProfile = 'child',
  showLabels = true,
  size = 'md'
} = Astro.props;

const profiles = [
  {
    id: 'child',
    name: 'Child',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-full h-full">
            <path d="M11.7 2.805a.75.75 0 01.6 0A60.65 60.65 0 0122.83 8.72a.75.75 0 01-.231 1.337 49.949 49.949 0 00-9.902 3.912l-.003.002-.34.18a.75.75 0 01-.707 0 50.009 50.009 0 00-10.243-4.092.75.75 0 01-.23-1.337A60.653 60.653 0 0111.7 2.805z" />
            <path d="M13.06 15.473a48.45 48.45 0 017.666-3.282c.134 1.414.22 2.843.255 4.285a.75.75 0 01-.46.71 47.878 47.878 0 00-8.105 4.342.75.75 0 01-.832 0 47.877 47.877 0 00-8.104-4.342.75.75 0 01-.461-.71c.035-1.442.121-2.87.255-4.286A48.4 48.4 0 016 13.18v1.27a1.5 1.5 0 00-.14 2.508c-.09.38-.222.753-.397 1.11.452.213.901.434 1.346.661a6.729 6.729 0 00.551-1.608 1.5 1.5 0 00.14-2.67v-.645a48.549 48.549 0 013.44 1.668 2.25 2.25 0 002.12 0z" />
            <path d="M4.462 19.462c.42-.419.753-.89 1-1.394.453.213.902.434 1.347.661a6.743 6.743 0 01-1.286 1.794.75.75 0 11-1.06-1.06z" />
          </svg>`,
    color: 'primary'
  },
  {
    id: 'parent',
    name: 'Parent',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-full h-full">
            <path d="M4.5 6.375a4.125 4.125 0 118.25 0 4.125 4.125 0 01-8.25 0zM14.25 8.625a3.375 3.375 0 116.75 0 3.375 3.375 0 01-6.75 0zM1.5 19.125a7.125 7.125 0 0114.25 0v.003l-.001.119a.75.75 0 01-.363.63 13.067 13.067 0 01-6.761 1.873c-2.472 0-4.786-.684-6.76-1.873a.75.75 0 01-.364-.63l-.001-.122zM17.25 19.128l-.001.144a2.25 2.25 0 01-.233.96 10.088 10.088 0 005.06-1.01.75.75 0 00.42-.643 4.875 4.875 0 00-6.957-4.611 8.586 8.586 0 011.71 5.157v.003z" />
          </svg>`,
    color: 'secondary'
  },
  {
    id: 'teacher',
    name: 'Teacher',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-full h-full">
            <path d="M11.7 2.805a.75.75 0 01.6 0A60.65 60.65 0 0122.83 8.72a.75.75 0 01-.231 1.337 49.949 49.949 0 00-9.902 3.912l-.003.002-.34.18a.75.75 0 01-.707 0 50.009 50.009 0 00-10.243-4.092.75.75 0 01-.23-1.337A60.653 60.653 0 0111.7 2.805z" />
            <path d="M13.06 15.473a48.45 48.45 0 017.666-3.282c.134 1.414.22 2.843.255 4.285a.75.75 0 01-.46.71 47.878 47.878 0 00-8.105 4.342.75.75 0 01-.832 0 47.877 47.877 0 00-8.104-4.342.75.75 0 01-.461-.71c.035-1.442.121-2.87.255-4.286A48.4 48.4 0 016 13.18v1.27a1.5 1.5 0 00-.14 2.508c-.09.38-.222.753-.397 1.11.452.213.901.434 1.346.661a6.729 6.729 0 00.551-1.608 1.5 1.5 0 00.14-2.67v-.645a48.549 48.549 0 013.44 1.668 2.25 2.25 0 002.12 0z" />
            <path d="M4.462 19.462c.42-.419.753-.89 1-1.394.453.213.902.434 1.347.661a6.743 6.743 0 01-1.286 1.794.75.75 0 11-1.06-1.06z" />
          </svg>`,
    color: 'accent'
  }
];

const sizeClasses = {
  sm: {
    container: 'flex space-x-2',
    icon: 'w-6 h-6',
    button: 'p-1.5 rounded-full',
    label: 'text-xs'
  },
  md: {
    container: 'flex space-x-3',
    icon: 'w-8 h-8',
    button: 'p-2 rounded-full',
    label: 'text-sm'
  },
  lg: {
    container: 'flex space-x-4',
    icon: 'w-10 h-10',
    button: 'p-2.5 rounded-full',
    label: 'text-base'
  }
};

const sizeClass = sizeClasses[size];
---

<div class="profile-switcher">
  <div class={`flex ${showLabels ? 'flex-col space-y-2' : 'flex-row space-x-3'} items-center`}>
    {profiles.map((profile) => (
      <div class={`flex ${showLabels ? 'flex-row items-center' : 'flex-col items-center'} ${showLabels ? 'space-x-2' : 'space-y-1'}`}>
        <button
          class={`${sizeClass.button} bg-${profile.color}/${currentProfile === profile.id ? '20' : '10'} 
                 text-${profile.color} hover:bg-${profile.color}/30 transition-colors
                 ${currentProfile === profile.id ? 'ring-2 ring-' + profile.color + '/50' : ''}`}
          data-profile={profile.id}
          aria-label={`Switch to ${profile.name} profile`}
          aria-pressed={currentProfile === profile.id}
        >
          <div class={sizeClass.icon}>
            <Fragment set:html={profile.icon} />
          </div>
        </button>
        
        {showLabels && (
          <span class={`${sizeClass.label} font-medium ${currentProfile === profile.id ? 'text-' + profile.color : 'text-gray-500'}`}>
            {profile.name}
          </span>
        )}
      </div>
    ))}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const profileButtons = document.querySelectorAll('.profile-switcher button');
    
    profileButtons.forEach(button => {
      button.addEventListener('click', () => {
        const profileId = button.getAttribute('data-profile');
        
        // In a real app, this would make an API call to switch profiles
        console.log(`Switching to ${profileId} profile`);
        
        // Update UI to show active profile
        profileButtons.forEach(btn => {
          const btnProfile = btn.getAttribute('data-profile');
          const color = btnProfile === 'child' ? 'primary' : btnProfile === 'parent' ? 'secondary' : 'accent';
          
          if (btnProfile === profileId) {
            btn.setAttribute('aria-pressed', 'true');
            btn.classList.add(`ring-2`);
            btn.classList.add(`ring-${color}/50`);
            btn.classList.remove(`bg-${color}/10`);
            btn.classList.add(`bg-${color}/20`);
            
            // Update label color if labels are shown
            const label = btn.parentElement?.querySelector('span');
            if (label) {
              label.classList.remove('text-gray-500');
              label.classList.add(`text-${color}`);
            }
          } else {
            btn.setAttribute('aria-pressed', 'false');
            btn.classList.remove(`ring-2`);
            btn.classList.remove(`ring-${color}/50`);
            btn.classList.add(`bg-${color}/10`);
            btn.classList.remove(`bg-${color}/20`);
            
            // Update label color if labels are shown
            const label = btn.parentElement?.querySelector('span');
            if (label) {
              label.classList.add('text-gray-500');
              label.classList.remove(`text-${color}`);
            }
          }
        });
        
        // In a real app, this would reload the page or update the UI
        // window.location.reload();
      });
    });
  });
</script>