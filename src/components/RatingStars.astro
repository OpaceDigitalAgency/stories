---
import type { RatingStarsProps } from '../types/components';

interface ExtendedRatingStarsProps extends RatingStarsProps {
  maxRating?: number;
  size?: 'sm' | 'md' | 'lg';
  interactive?: boolean;
}

const {
  rating,
  className = '',
  maxRating = 5,
  size = 'md',
  interactive = false
} = Astro.props as ExtendedRatingStarsProps;

// Calculate the number of full, half, and empty stars
const fullStars = Math.floor(rating);
const hasHalfStar = rating % 1 >= 0.5;
const emptyStars = maxRating - fullStars - (hasHalfStar ? 1 : 0);

// Size classes
const sizeClasses: Record<'sm' | 'md' | 'lg', string> = {
  sm: 'w-5 h-5 gap-1',
  md: 'w-6 h-6 gap-1.5',
  lg: 'w-8 h-8 gap-2'
};

const starClass = `${sizeClasses[size]} ${interactive ? 'cursor-pointer transform-style-3d transition-all duration-500 hover:scale-125 hover:translate-z-4 hover:shadow-glow hover:rotate-12' : ''}`;
const componentId = `rating-stars-${Math.random().toString(36).substring(2, 9)}`;
---

<div class={`inline-flex items-center gap-1 ${className}`} aria-label={`Rating: ${rating} out of ${maxRating} stars`} id={componentId}>
  {/* Full stars */}
  {Array.from({ length: fullStars }).map((_, i) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="currentColor"
      class={`text-accent animate-pulse-subtle ${starClass} drop-shadow-glow transform-style-3d hover:translate-z-4 transition-transform duration-500`}
      aria-hidden="true"
      data-value={i + 1}
      style="filter: drop-shadow(0 0 2px var(--tw-shadow-color));"
    >
      <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" />
    </svg>
  ))}
  
  {/* Half star */}
  {hasHalfStar && (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="currentColor"
      class={`text-accent ${starClass} drop-shadow-glow transform-style-3d hover:translate-z-4 transition-transform duration-500`}
      aria-hidden="true"
      data-value={fullStars + 0.5}
    >
      <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" style="clip-path: inset(0 50% 0 0);" />
      <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" style="clip-path: inset(0 0 0 50%); fill: #e2e8f0;" />
    </svg>
  )}
  
  {/* Empty stars */}
  {Array.from({ length: emptyStars }).map((_, i) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="currentColor"
      class={`text-neutral-200/80 ${starClass} hover:text-accent/50 transform-style-3d hover:translate-z-4 transition-transform duration-500`}
      aria-hidden="true"
      data-value={fullStars + (hasHalfStar ? 1 : 0) + i + 1}
    >
      <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" />
    </svg>
  ))}
  
  <span class="ml-3 text-base font-bold text-text-secondary bg-white/90 backdrop-blur-xl px-4 py-2 rounded-full shadow-playful transform-style-3d hover:translate-z-4 hover:scale-110 transition-all duration-500 group">
    <span class="relative">
      {rating.toFixed(1)}
      <span class="absolute inset-0 bg-gradient-to-r from-accent/0 via-accent/20 to-accent/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-full"></span>
      <span class="absolute inset-0 bg-white/10 scale-0 group-hover:scale-125 opacity-0 group-hover:opacity-100 transition-all duration-500 blur-sm rounded-full"></span>
    </span>
  </span>
</div>

{interactive && (
  <script define:vars={{ componentId, maxRating }}>
    document.addEventListener('DOMContentLoaded', () => {
      const container = document.getElementById(componentId);
      if (!container) return;
      
      const stars = container.querySelectorAll('svg');
      const ratingText = container.querySelector('span');
      if (!ratingText || !ratingText.textContent) return;
      
      let currentRating = parseFloat(ratingText.textContent);
      
      // Hover effect
      stars.forEach(star => {
        star.addEventListener('mouseenter', () => {
          const value = parseFloat(star.dataset.value);
          
          // Update visual state
          stars.forEach(s => {
            const starValue = parseFloat(s.dataset.value);
            if (starValue <= value) {
              s.classList.add('text-accent', 'scale-125', 'shadow-glow');
              s.classList.remove('text-neutral-200/50');
            } else {
              s.classList.remove('text-accent', 'scale-125', 'shadow-glow');
              s.classList.add('text-neutral-200/50');
            }
          });
        });
        
        star.addEventListener('mouseleave', () => {
          // Reset to original state
          updateStarsDisplay(currentRating);
        });
        
        star.addEventListener('click', () => {
          const value = parseFloat(star.dataset.value);
          currentRating = value;
          ratingText.textContent = value.toFixed(1);
          
          // Trigger animation
          star.classList.add('wiggle-animation');
          setTimeout(() => {
            star.classList.remove('wiggle-animation');
          }, 1000);
          
          // Here you could also dispatch a custom event or call a function
          // to handle the rating change
          const ratingEvent = new CustomEvent('rating-changed', {
            detail: { rating: value }
          });
          container.dispatchEvent(ratingEvent);
        });
      });
      
      function updateStarsDisplay(rating) {
        stars.forEach(s => {
          const starValue = parseFloat(s.dataset.value);
          s.classList.remove('scale-125', 'shadow-glow');
          
          if (starValue <= rating) {
            s.classList.add('text-accent', 'animate-pulse-subtle');
            s.classList.remove('text-neutral-200/50');
          } else {
            s.classList.remove('text-accent', 'animate-pulse-subtle');
            s.classList.add('text-neutral-200/50');
          }
        });
      }

      // Add keyframe animation for subtle pulsing
      const style = document.createElement('style');
      style.textContent = `
        @keyframes pulse-subtle {
          0% { transform: scale(1) rotate(0deg); }
          25% { transform: scale(1.05) rotate(3deg); }
          50% { transform: scale(1.1) rotate(-3deg); }
          75% { transform: scale(1.05) rotate(2deg); }
          100% { transform: scale(1) rotate(0deg); }
        }
        .animate-pulse-subtle {
          animation: pulse-subtle 2s ease-in-out infinite;
        }
      `;
      document.head.appendChild(style);
    });
  </script>
)}