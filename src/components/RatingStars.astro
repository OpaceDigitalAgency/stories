---
export interface Props {
  rating: number;
  maxRating?: number;
  size?: 'sm' | 'md' | 'lg';
  interactive?: boolean;
}

const {
  rating,
  maxRating = 5,
  size = 'md',
  interactive = false
} = Astro.props;

// Calculate the number of full, half, and empty stars
const fullStars = Math.floor(rating);
const hasHalfStar = rating % 1 >= 0.5;
const emptyStars = maxRating - fullStars - (hasHalfStar ? 1 : 0);

// Size classes
const sizeClasses = {
  sm: 'w-4 h-4',
  md: 'w-5 h-5',
  lg: 'w-6 h-6'
};

const starClass = `${sizeClasses[size]} ${interactive ? 'cursor-pointer transform transition-transform hover:scale-110' : ''}`;
const componentId = `rating-stars-${Math.random().toString(36).substring(2, 9)}`;
---

<div class="flex items-center" aria-label={`Rating: ${rating} out of ${maxRating} stars`} id={componentId}>
  {/* Full stars */}
  {Array.from({ length: fullStars }).map((_, i) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="currentColor"
      class={`text-accent ${starClass}`}
      aria-hidden="true"
      data-value={i + 1}
    >
      <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" />
    </svg>
  ))}
  
  {/* Half star */}
  {hasHalfStar && (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="currentColor"
      class={`text-accent ${starClass}`}
      aria-hidden="true"
      data-value={fullStars + 0.5}
    >
      <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" style="clip-path: inset(0 50% 0 0);" />
      <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" style="clip-path: inset(0 0 0 50%); fill: #e2e8f0;" />
    </svg>
  )}
  
  {/* Empty stars */}
  {Array.from({ length: emptyStars }).map((_, i) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="currentColor"
      class={`text-gray-200 ${starClass}`}
      aria-hidden="true"
      data-value={fullStars + (hasHalfStar ? 1 : 0) + i + 1}
    >
      <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" />
    </svg>
  ))}
  
  <span class="ml-1 text-sm font-medium text-text-secondary">{rating.toFixed(1)}</span>
</div>

{interactive && (
  <script define:vars={{ componentId, maxRating }}>
    document.addEventListener('DOMContentLoaded', () => {
      const container = document.getElementById(componentId);
      if (!container) return;
      
      const stars = container.querySelectorAll('svg');
      const ratingText = container.querySelector('span');
      let currentRating = parseFloat(ratingText.textContent);
      
      // Hover effect
      stars.forEach(star => {
        star.addEventListener('mouseenter', () => {
          const value = parseFloat(star.dataset.value);
          
          // Update visual state
          stars.forEach(s => {
            const starValue = parseFloat(s.dataset.value);
            if (starValue <= value) {
              s.classList.add('text-accent', 'scale-110');
              s.classList.remove('text-gray-200');
            } else {
              s.classList.remove('text-accent', 'scale-110');
              s.classList.add('text-gray-200');
            }
          });
        });
        
        star.addEventListener('mouseleave', () => {
          // Reset to original state
          updateStarsDisplay(currentRating);
        });
        
        star.addEventListener('click', () => {
          const value = parseFloat(star.dataset.value);
          currentRating = value;
          ratingText.textContent = value.toFixed(1);
          
          // Trigger animation
          star.classList.add('wiggle-animation');
          setTimeout(() => {
            star.classList.remove('wiggle-animation');
          }, 1000);
          
          // Here you could also dispatch a custom event or call a function
          // to handle the rating change
          const ratingEvent = new CustomEvent('rating-changed', {
            detail: { rating: value }
          });
          container.dispatchEvent(ratingEvent);
        });
      });
      
      function updateStarsDisplay(rating) {
        stars.forEach(s => {
          const starValue = parseFloat(s.dataset.value);
          s.classList.remove('scale-110');
          
          if (starValue <= rating) {
            s.classList.add('text-accent');
            s.classList.remove('text-gray-200');
          } else {
            s.classList.remove('text-accent');
            s.classList.add('text-gray-200');
          }
        });
      }
    });
  </script>
)}