---
import NavHeader from '../components/NavHeader.astro';
import Footer from '../components/Footer.astro';
import CardStory from '../components/CardStory.astro';
import CardAuthor from '../components/CardAuthor.astro';
import StoryCarousel from '../components/StoryCarousel.astro';
import SponsoredCarousel from '../components/SponsoredCarousel.astro';
import AIRecommendationBox from '../components/AIRecommendationBox.astro';
import EducatorSection from '../components/EducatorSection.astro';
import SignUpPrompts from '../components/SignUpPrompts.astro';
import { fetchFromStrapi } from '../lib/api';

// Initialize empty arrays for data
let featuredStories = [];
let mostLovedStories = [];
let latestSelfPublishedStories = [];
let aiEnhancedStories = [];
let sponsoredStories = [];
let featuredAuthors = [];

try {
  // Fetch data from Strapi
  const [
    featuredStoriesResponse,
    mostLovedStoriesResponse,
    selfPublishedStoriesResponse,
    aiEnhancedStoriesResponse,
    featuredAuthorsResponse,
    sponsoredStoriesResponse
  ] = await Promise.all([
    fetchFromStrapi('stories', {
      filters: { featured: true },
      populate: '*',
      sort: 'publishedAt:desc',
      pagination: { limit: 3 }
    }),
    fetchFromStrapi('stories', {
      sort: 'averageRating:desc',
      populate: '*',
      pagination: { limit: 6 }
    }),
    fetchFromStrapi('stories', {
      filters: { isSelfPublished: true },
      populate: '*',
      sort: 'publishedAt:desc',
      pagination: { limit: 6 }
    }),
    fetchFromStrapi('stories', {
      filters: { isAIEnhanced: true },
      populate: '*',
      sort: 'publishedAt:desc',
      pagination: { limit: 6 }
    }),
    fetchFromStrapi('authors', {
      filters: { featured: true },
      populate: '*',
      pagination: { limit: 2 }
    }),
    fetchFromStrapi('stories', {
      filters: { isSponsored: true },
      populate: '*',
      sort: 'publishedAt:desc',
      pagination: { limit: 6 }
    })
  ]);

  // Map responses to data arrays
  featuredStories = featuredStoriesResponse.data?.map(item => ({
    title: item.attributes?.title || '',
    excerpt: item.attributes?.excerpt || '',
    coverImage: item.attributes?.cover?.data?.attributes?.url || '',
    author: {
      name: item.attributes?.author?.data?.attributes?.name || '',
      avatar: item.attributes?.author?.data?.attributes?.avatar?.data?.attributes?.url || '',
      slug: item.attributes?.author?.data?.attributes?.slug || ''
    },
    rating: item.attributes?.averageRating || 0,
    tags: item.attributes?.tags?.data?.map(tag => tag.attributes?.name) || [],
    slug: item.attributes?.slug || '',
    publishDate: item.attributes?.publishedAt ? new Date(item.attributes.publishedAt) : new Date()
  })) || [];

  mostLovedStories = mostLovedStoriesResponse.data?.map(item => ({
    title: item.attributes?.title || '',
    excerpt: item.attributes?.excerpt || '',
    coverImage: item.attributes?.cover?.data?.attributes?.url || '',
    author: {
      name: item.attributes?.author?.data?.attributes?.name || '',
      avatar: item.attributes?.author?.data?.attributes?.avatar?.data?.attributes?.url || '',
      slug: item.attributes?.author?.data?.attributes?.slug || ''
    },
    rating: item.attributes?.averageRating || 0,
    tags: item.attributes?.tags?.data?.map(tag => tag.attributes?.name) || [],
    slug: item.attributes?.slug || '',
    publishDate: item.attributes?.publishedAt ? new Date(item.attributes.publishedAt) : new Date()
  })) || [];

  latestSelfPublishedStories = selfPublishedStoriesResponse.data?.map(item => ({
    title: item.attributes?.title || '',
    excerpt: item.attributes?.excerpt || '',
    coverImage: item.attributes?.cover?.data?.attributes?.url || '',
    author: {
      name: item.attributes?.author?.data?.attributes?.name || '',
      avatar: item.attributes?.author?.data?.attributes?.avatar?.data?.attributes?.url || '',
      slug: item.attributes?.author?.data?.attributes?.slug || ''
    },
    rating: item.attributes?.averageRating || 0,
    tags: item.attributes?.tags?.data?.map(tag => tag.attributes?.name) || [],
    slug: item.attributes?.slug || '',
    publishDate: item.attributes?.publishedAt ? new Date(item.attributes.publishedAt) : new Date()
  })) || [];

  aiEnhancedStories = aiEnhancedStoriesResponse.data?.map(item => ({
    title: item.attributes?.title || '',
    excerpt: item.attributes?.excerpt || '',
    coverImage: item.attributes?.cover?.data?.attributes?.url || '',
    author: {
      name: item.attributes?.author?.data?.attributes?.name || '',
      avatar: item.attributes?.author?.data?.attributes?.avatar?.data?.attributes?.url || '',
      slug: item.attributes?.author?.data?.attributes?.slug || ''
    },
    rating: item.attributes?.averageRating || 0,
    tags: item.attributes?.tags?.data?.map(tag => tag.attributes?.name) || [],
    slug: item.attributes?.slug || '',
    publishDate: item.attributes?.publishedAt ? new Date(item.attributes.publishedAt) : new Date()
  })) || [];

  featuredAuthors = featuredAuthorsResponse.data?.map(item => ({
    name: item.attributes?.name || '',
    avatar: item.attributes?.avatar?.data?.attributes?.url || '',
    bio: item.attributes?.bio || '',
    slug: item.attributes?.slug || '',
    storyCount: item.attributes?.storyCount || 0,
    socialLinks: {
      twitter: item.attributes?.twitter || '',
      instagram: item.attributes?.instagram || '',
      website: item.attributes?.website || ''
    }
  })) || [];

  sponsoredStories = sponsoredStoriesResponse.data?.map(item => ({
    title: item.attributes?.title || '',
    excerpt: item.attributes?.excerpt || '',
    coverImage: item.attributes?.cover?.data?.attributes?.url || '',
    author: {
      name: item.attributes?.author?.data?.attributes?.name || '',
      avatar: item.attributes?.author?.data?.attributes?.avatar?.data?.attributes?.url || '',
      slug: item.attributes?.author?.data?.attributes?.slug || ''
    },
    rating: item.attributes?.averageRating || 0,
    tags: item.attributes?.tags?.data?.map(tag => tag.attributes?.name) || [],
    slug: item.attributes?.slug || '',
    publishDate: item.attributes?.publishedAt ? new Date(item.attributes.publishedAt) : new Date(),
    sponsored: true
  })) || [];
} catch (error) {
  console.error('Error fetching data from Strapi:', error);
}
---
